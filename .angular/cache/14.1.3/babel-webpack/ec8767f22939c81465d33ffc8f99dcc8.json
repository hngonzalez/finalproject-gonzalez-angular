{"ast":null,"code":"import { emptyAction } from './../app.reducer';\nimport { Person } from 'src/app/features/models/person.model';\nimport { LOGIN_ACTIONS, LOGOUT_ACTIONS } from './../actions/login.actions';\nimport { createEffect, ofType } from \"@ngrx/effects\";\nimport { mergeMap, map, delay, catchError } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/core/auth/services/auth.service\";\nimport * as i3 from \"src/app/features/services/data.service\";\nimport * as i4 from \"@angular/router\";\nexport let LoginEffectsService = /*#__PURE__*/(() => {\n  class LoginEffectsService {\n    constructor(actions$, _loginService, _dataService, router) {\n      this.actions$ = actions$;\n      this._loginService = _loginService;\n      this._dataService = _dataService;\n      this.router = router;\n      this.personAux = new Person();\n      this.loginEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(LOGIN_ACTIONS.login.run), delay(1000), mergeMap(action => {\n          return this._dataService.getUsersLogin(action.user, action.password).pipe(map(person => {\n            return person ? LOGIN_ACTIONS.login.success({\n              person,\n              token: 'asdasdasdasdasdasdasdadsads'\n            }) : LOGIN_ACTIONS.login.failed();\n          }), catchError(() => {\n            return EMPTY;\n          }));\n        }));\n      });\n      this.loginSuccessEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(LOGIN_ACTIONS.login.success), map(({\n          token\n        }) => {\n          localStorage.setItem('token', token);\n          this.router.navigate(['./']);\n          return emptyAction();\n        }));\n      });\n      this.loginFailedEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(LOGIN_ACTIONS.login.failed), map(_ => {\n          return emptyAction();\n        }));\n      });\n      this.logoutEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(LOGOUT_ACTIONS.logout.run), delay(1000), map(_ => {\n          return LOGOUT_ACTIONS.logout.success();\n        }));\n      });\n      this.logoutSuccessEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(LOGOUT_ACTIONS.logout.success), map(() => {\n          localStorage.removeItem('token');\n          this.router.navigate(['./login']);\n          return emptyAction();\n        }));\n      });\n    }\n\n  }\n\n  LoginEffectsService.ɵfac = function LoginEffectsService_Factory(t) {\n    return new (t || LoginEffectsService)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.DataService), i0.ɵɵinject(i4.Router));\n  };\n\n  LoginEffectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginEffectsService,\n    factory: LoginEffectsService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginEffectsService;\n})();","map":null,"metadata":{},"sourceType":"module"}