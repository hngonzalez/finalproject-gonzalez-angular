{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Course } from './../models/course';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.dataPersonsList = [{\n        idPerson: 1,\n        username: 'fgonzalez',\n        password: 'admin',\n        name: 'Franco',\n        lastName: 'Gonzalez',\n        type: 'student',\n        email: 'Franco@outlook.com',\n        courses: [{\n          idCourse: 1,\n          name: 'Análisis Matemático',\n          idClassroom: 1\n        }, {\n          idCourse: 2,\n          name: 'Organización Empresarial',\n          idClassroom: 2\n        }]\n      }, {\n        idPerson: 2,\n        username: 'mgonzalez',\n        password: 'admin',\n        name: 'Matias',\n        lastName: 'Gonzalez',\n        type: 'student',\n        email: 'Matias@outlook.com',\n        courses: [{\n          idCourse: 1,\n          name: 'Análisis Matemático',\n          idClassroom: 1\n        }, {\n          idCourse: 2,\n          name: 'Organización Empresarial',\n          idClassroom: 2\n        }]\n      }, {\n        idPerson: 3,\n        username: 'frgonzalez',\n        password: 'admin',\n        name: 'Franco',\n        lastName: 'Gonzalez',\n        type: 'student',\n        email: 'Franco@outlook.com',\n        courses: []\n      }, {\n        idPerson: 4,\n        username: 'lgonzalez',\n        password: 'admin',\n        name: 'Laura',\n        lastName: 'Gonzalez',\n        type: 'student',\n        email: 'Laura@outlook.com',\n        courses: [{\n          idCourse: 2,\n          name: 'Organización Empresarial',\n          idClassroom: 2\n        }]\n      }, {\n        idPerson: 5,\n        username: 'admin',\n        password: 'admin',\n        name: 'Miguel',\n        lastName: 'Apellidito',\n        type: 'admin',\n        email: 'Miguel@outlook.com',\n        courses: []\n      }, {\n        idPerson: 6,\n        username: 'user',\n        password: 'user',\n        name: 'Joaquin',\n        lastName: 'Algo',\n        type: 'user',\n        email: 'Joaquin@outlook.com',\n        courses: []\n      }, {\n        idPerson: 7,\n        username: 'npipez',\n        password: 'admin',\n        name: 'Nombrecito',\n        lastName: 'Pipez',\n        type: 'user',\n        email: 'Nombrecito@outlook.com',\n        courses: []\n      }, {\n        idPerson: 8,\n        username: 'puerpowi',\n        password: 'admin',\n        name: 'Paula',\n        lastName: 'Uerpowi',\n        type: 'user',\n        email: 'Paula@outlook.com',\n        courses: []\n      }];\n      this.dataCourses = [{\n        idCourse: 1,\n        name: 'Análisis Matemático',\n        idClassroom: 1\n      }, {\n        idCourse: 2,\n        name: 'Organización Empresarial',\n        idClassroom: 2\n      }];\n      this.dataClassrooms = [{\n        idClassroom: 1,\n        name: 'Aula B254'\n      }, {\n        idClassroom: 2,\n        name: 'Aula A361'\n      }, {\n        idClassroom: 3,\n        name: 'Aula C255'\n      }];\n    }\n\n    getUsers() {\n      return this.http.get(environment.urlApi + 'person');\n    }\n\n    getUsers2(username, password) {\n      return this.http.get(environment.urlApi + 'person').pipe(map(persons => {\n        return persons ? persons : null;\n      }), catchError(error => {\n        throw new Error();\n      }));\n    }\n\n    getUsersLogin(username, password) {\n      return this.http.get(environment.urlApi + 'person').pipe(map(persons => {\n        return persons.find(person => person.username == username && person.password == password) || null;\n      }), catchError(error => {\n        throw new Error();\n      }));\n    }\n\n    getStudents() {\n      return this.http.get(environment.urlApi + 'person');\n    }\n\n    getCourses() {\n      return this.http.get(environment.urlApi + 'course');\n    }\n\n    getClassrooms() {\n      return this.dataClassrooms;\n    }\n\n    getRelCoursePerson() {\n      return this.http.get(environment.urlApi + 'rel-course-person');\n    }\n\n    getStudentById(idPerson) {\n      return this.http.get(environment.urlApi + 'person/' + idPerson);\n    }\n\n    getStudentsByCourseId(idCourse) {\n      var arStudents = [];\n      this.http.get(environment.urlApi + 'rel-course-person').subscribe(rel => {\n        rel.forEach(element => {\n          if (element.idCourse == idCourse) {\n            this.getStudentById(element.idPerson).subscribe(person => {\n              arStudents.push(person);\n            });\n          }\n        });\n      });\n      return of(arStudents);\n    }\n\n    getDataCoursesById(course) {\n      return this.http.get(environment.urlApi + 'course/' + course.idCourse);\n    }\n\n    getDataCoursesByCourseId(idCourse) {\n      return this.http.get(environment.urlApi + 'course/' + idCourse);\n    }\n\n    addStudent(student) {\n      var curCourses = student.courses;\n      student.courses = [];\n      this.http.post(environment.urlApi + 'person/', student).subscribe(resp => {\n        resp.courses = curCourses;\n        this.addRelCourseStudent(resp);\n      }, error => {});\n    }\n\n    addRelCourseStudent(resp) {\n      var obj = {};\n      resp.courses.forEach(course => {\n        if (course.idCourse) {\n          obj = {\n            \"idCourse\": course.idCourse,\n            \"idPerson\": resp.idPerson\n          };\n          this.http.post(environment.urlApi + 'rel-course-person', obj).subscribe(resp2 => {}, error => {});\n        }\n      });\n    }\n\n    addNewCourseToStudent(idCourse, idPerson) {\n      var obj = {};\n      obj = {\n        \"idCourse\": idCourse,\n        \"idPerson\": idPerson\n      };\n      return this.http.post(environment.urlApi + 'rel-course-person', obj);\n    }\n\n    addClassroomToStudent(idPerson, course) {\n      let indexToEdit = this.dataPersonsList.findIndex(person => {\n        return person.idPerson == idPerson;\n      });\n      this.dataPersonsList[indexToEdit].courses.push(course);\n    }\n    /**\r\n     * Función que agrega un nuevo curso a la lista\r\n     * @param course nuevo curso a agregar\r\n     */\n\n\n    addCourse(course) {\n      return this.http.post(environment.urlApi + 'course/', course);\n    }\n\n    addClassroom(classroom) {\n      classroom.idClassroom = this.dataClassrooms.length + 1;\n      this.dataClassrooms.push(classroom);\n    }\n\n    editStudent(student) {\n      let indexToEdit = this.dataPersonsList.findIndex(person => {\n        return person.idPerson == student.idPerson;\n      });\n      this.dataPersonsList[indexToEdit].name = student.name;\n      this.dataPersonsList[indexToEdit].lastName = student.lastName;\n      this.dataPersonsList[indexToEdit].email = student.email;\n    }\n\n    editCourse(course) {\n      let indexToEdit = this.dataCourses.findIndex(courseElement => {\n        return courseElement.idCourse == course.idCourse;\n      });\n      this.dataCourses[indexToEdit].name = course.name;\n    }\n\n    editClassroom(classroom) {\n      let indexToEdit = this.dataClassrooms.findIndex(classroomElement => {\n        return classroomElement.idClassroom == classroom.idClassroom;\n      });\n      this.dataClassrooms[indexToEdit].name = classroom.name;\n    }\n\n    updateStudent(student) {\n      return this.http.put(environment.urlApi + 'person/' + student.idPerson, student);\n    }\n\n    updateCourse(idCourse, courseName) {\n      let course = new Course(idCourse, courseName, Math.random());\n      return this.http.put(environment.urlApi + 'course/' + course.idCourse, course);\n    }\n\n    removeClassroom(idPerson, idCourse) {\n      let indexClassToRemove = this.dataPersonsList.findIndex(person => {\n        return person.idPerson == idPerson;\n      });\n      let indexClass2ToRemove = this.dataPersonsList[indexClassToRemove].courses.findIndex(course => {\n        return course.idCourse == idCourse;\n      });\n      this.dataPersonsList[indexClassToRemove].courses.splice(indexClass2ToRemove, 1);\n    }\n\n    deleteStudent(student) {\n      return this.http.delete(environment.urlApi + 'person/' + student.idPerson);\n    }\n\n    deleteCourse(course) {\n      return this.http.delete(environment.urlApi + 'course/' + course.idCourse);\n    }\n\n    deleteStudentFromCourse(idRel) {\n      return this.http.delete(environment.urlApi + 'rel-course-person/' + idRel);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}