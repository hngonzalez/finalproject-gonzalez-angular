{"ast":null,"code":"import { PERSONS_ACTIONS } from './../actions/person.actions';\nimport { emptyAction } from './../app.reducer';\nimport { Person } from 'src/app/features/models/person.model';\nimport { createEffect, ofType } from \"@ngrx/effects\";\nimport { mergeMap, map, delay, catchError } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/features/services/data.service\";\nexport let PersonsEffectsService = /*#__PURE__*/(() => {\n  class PersonsEffectsService {\n    constructor(actions$, _dataService) {\n      this.actions$ = actions$;\n      this._dataService = _dataService;\n      this.personAux = new Person();\n      this.personsEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PERSONS_ACTIONS.load.run), delay(1000), mergeMap(_ => {\n          return this._dataService.getStudents().pipe(map(persons => {\n            return persons ? PERSONS_ACTIONS.load.success({\n              persons\n            }) : emptyAction();\n          }), catchError(() => {\n            return EMPTY;\n          }));\n        }));\n      });\n      this.personsSuccessEffects$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PERSONS_ACTIONS.load.success), map(persons => {\n          return emptyAction();\n        }));\n      });\n    }\n\n  }\n\n  PersonsEffectsService.ɵfac = function PersonsEffectsService_Factory(t) {\n    return new (t || PersonsEffectsService)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.DataService));\n  };\n\n  PersonsEffectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PersonsEffectsService,\n    factory: PersonsEffectsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PersonsEffectsService;\n})();","map":null,"metadata":{},"sourceType":"module"}